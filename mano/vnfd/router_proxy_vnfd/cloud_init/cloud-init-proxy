#cloud-config - loadbalancer
password: osm4u
chpasswd: { expire: False }
ssh_pwauth: True

users:
  - name: ubuntu
    ssh-authorized-keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC/ytsRnYehDFUX5nNhICnmR0IxtdFJjn9YAvO3CCx2FzLwOIRtMzUmHPbI3WQ+REyVZtUtdV9pHynO+E5gSolsWZrw9hJ4qT6+T078gayAIpp/i4tJtpOdJwUoOxf8w2AyIcbtH9DJwkv1y8Cx0hFh2TlBKmNnCsE0fGGYHlkusn1odYl1j9t3l037KW7KEpDMslSSYw0Hgbt02hU8sPDZdKpepOaHww+7sEln7ENf614KVdMNw/myvUjY4e3FF3FDqtnO5TUHbFkhCE3rPIm0K1YaAHFXVMibXkcsdvrsBUAiUr79aUAiaFumoutDi2ccaE5v9HPncU3xf5bu+zGP abubakrm@dyn-227-202.lancs.ac.uk

runcmd:
  - echo $(hostname -I | cut -d\  -f1) $(hostname) | sudo tee -a /etc/hosts
  - sed -i '/^APT::Periodic::Update-Package-Lists /s/"1"/"0"/' /etc/apt/apt.conf.d/20auto-upgrades
  - sed -i '/^APT::Periodic::Unattended-Upgrade /s/"1"/"0"/' /etc/apt/apt.conf.d/20auto-upgrades
  - mkdir /home/ubuntu/bin

write_files:
  - content: |
      import sys
      import telnetlib
      import re

      def connect():
          #Enter your host IP to which you wish to telnet to instead of x.x.x.x
          HOST = "10.30.65.216"

          # Executing the below command is similar to executing "telnet x.x.x.x" in
          # command prompt, this command establishes the telnet session
          tn = telnetlib.Telnet(HOST)

          tn.read_until(b"Username: ")
          tn.write(b"ngcdi\n")
          tn.read_until(b"Password: ")
          tn.write(b"ngcdi\n")
          print(tn.read_until(b"Router#"))
          return tn

      def action(process):

          if process == "upgrade":
              up_intf = "gigabitEthernet 2/0"
              down_intf = "Ethernet 1/1"
          elif process == "downgrade":
              up_intf = "Ethernet 1/1"
              down_intf = "gigabitEthernet 2/0"
          elif process == "test":
              return test()
          else:
              print("invalid action", file=sys.stderr)
              return 1

          tn = connect()
          #the below commands will configure the loop back interface
          tn.write(b"conf t\n\n")
          print(tn.read_until(b"Router(config)#"))
          tn.write(("int %s\n\n"%(down_intf)).encode("ascii"))
          print(tn.read_until(b"Router(config-if)#"))
          tn.write(b"shutdown\n\n")
          print(tn.read_until(b"Router(config-if)#"))
          tn.write(b"exit\n\n")
          print(tn.read_until(b"Router(config)#"))
          tn.write(("int %s\n\n"%(up_intf)).encode("ascii"))
          print(tn.read_until(b"Router(config-if)#"))
          tn.write(b"no shutdown\n\n")
          print(tn.read_until(b"Router(config-if)#"))
          tn.write(b"end\n")
          print(tn.read_until(b"Router#"))
          tn.write(b"exit\n")
          tn.close()
          return 0

      def test():
          tn = connect()
          tn.write(b"ping 10.0.0.6\n")
          res = tn.read_until(b"Router#")

          print(res)
          p = re.compile("Success rate is ([0-9]*) percent")
          m = p.search(str(res))
          if m is None:
              print("Test failed", file=sys.stderr)
              return 1
          if int(m.group(1)) > 0:
              print("Ping failed", file=sys.stderr)
              return 1
          else:
              return 0


      if __name__ == "__main__":
          if (len(sys.argv) < 2) or (sys.argv[1] not in ["upgrade", "downgrade", "test"]):
              print("usage: ./config.py upgrade|downgrade|test")
              sys.exit(1)

          sys.exit(action(sys.argv[1]))
    path: /usr/bin/config.py
    permissions: '0755'
